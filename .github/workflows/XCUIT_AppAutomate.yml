name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install dependencies
        run: npm install

      - name: 'BrowserStack Env Setup'
        uses: browserstack/github-actions/setup-env@master
        with:
          username: ${{ secrets.BROWSERSTACK_USERNAME }}
          access-key: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}
          build-name: ${{ secrets.BROWSERSTACK_BUILD_NAME }}

      - name: 'Running XCUIT test on App Automate'
        run: |
          # Your existing script to run XCUIT test on App Automate
          # Ensure it completes successfully and sets up necessary environment variables

      - name: 'Wait for BrowserStack Build to Complete'
        id: wait-for-build
        run: |
          echo "Calling the build status API.."
          BUILD_STATUS_RESPONSE=$(curl -u ${{ secrets.BROWSERSTACK_USERNAME }}:${{ secrets.BROWSERSTACK_ACCESS_KEY }} -X GET "https://api-cloud.browserstack.com/app-automate/xcuitest/v2/builds/${{ env.BROWSERSTACK_BUILD_ID }}")
          export BUILD_STATUS=$(echo $BUILD_STATUS_RESPONSE | jq -c -r '.status')
          echo "Current build status: $BUILD_STATUS"

          while [ "$BUILD_STATUS" == "running" ]; do
            echo "Build is still running..."
            sleep 30 # Wait for 30 seconds before checking again
            BUILD_STATUS_RESPONSE=$(curl -u ${{ secrets.BROWSERSTACK_USERNAME }}:${{ secrets.BROWSERSTACK_ACCESS_KEY }} -X GET "https://api-cloud.browserstack.com/app-automate/xcuitest/v2/builds/${{ env.BROWSERSTACK_BUILD_ID }}")
            export BUILD_STATUS=$(echo $BUILD_STATUS_RESPONSE | jq -c -r '.status')
            echo "Current build status: $BUILD_STATUS"

            if [ "$BUILD_STATUS" != "running" ]; then
              break
            fi
          done

          echo "Getting session ID from the build response."
          export BROWSERSTACK_SESSION_ID=$(echo $BUILD_STATUS_RESPONSE | jq -c -r '.devices[0].sessions[0].id')
          echo "Session ID: $BROWSERSTACK_SESSION_ID"

          echo "Taking build status response's session ID and getting session results..."
          SESSION_RESULTS=$(curl -u ${{ secrets.BROWSERSTACK_USERNAME }}:${{ secrets.BROWSERSTACK_ACCESS_KEY }} -X GET "https://api-cloud.browserstack.com/app-automate/xcuitest/v2/builds/${{ env.BROWSERSTACK_BUILD_ID }}/sessions/$BROWSERSTACK_SESSION_ID")

          echo "Get Instrumentation log url from Session response.."
          export INSTRUMENTATION_LOG_URL=$(echo $SESSION_RESULTS | jq -c -r '.testcases.data[0].testcases[1].instrumentation_log')
          echo "Instrumentation log url: $INSTRUMENTATION_LOG_URL"

          echo "Get Instrumentation URL log response..."
          export INSTRUMENT_LOG_TEXT_RESULT=$(curl -u ${{ secrets.BROWSERSTACK_USERNAME }}:${{ secrets.BROWSERSTACK_ACCESS_KEY }} $INSTRUMENTATION_LOG_URL)

          echo "Convert Instrumentation URL log response to txt file..."
          echo "$INSTRUMENT_LOG_TEXT_RESULT" > ./instrument_log_text.txt

          echo "Convert log txt file to JUnit-xml"
          cat ./instrument_log_text.txt | xcpretty -r junit >> junit.xml

          echo "Sending test results to test management"
          curl -k -X POST "https://test-management.browserstack.com/api/v1/import/results/xml/junit" -u ${{ secrets.TEST_MANAGEMENT_API_TOKEN }} -F project_name="TCM_Project" -F "file_path=@./build/reports/junit.xml" -F test_run_name="TCM_TEST_RUN"

      - name: Generate HTML Report
        run: |
          echo "<html><head><title>Test Report</title></head><body><h1>Test Results</h1><p>Replace with your test results here</p></body></html>" > ./output.html

      - name: Upload HTML report
        uses: actions/upload-artifact@v2
        with:
          name: html-report
          path: output.html
