# This is a basic workflow to help you get started with Actions
####
name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:

      - name: 'BrowserStack Env Setup'  # Invokes the setup-env action
        uses: browserstack/github-actions/setup-env@master
        with:
          username:  ${{ secrets.BROWSERSTACK_USERNAME }}
          access-key: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}
            
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: 'Checkout the repository'
        uses: actions/checkout@v4

      - name: 'Running XCUIT test on App Automate'
        run:  |
                # # Upload ipa file # #
                APP_STATUS_RESPONSE=$(curl -u ${{ secrets.BROWSERSTACK_USERNAME }}:${{ secrets.BROWSERSTACK_ACCESS_KEY }} -X POST "https://api-cloud.browserstack.com/app-automate/xcuitest/v2/app" -F "file=@BrowserStack-SampleApp.ipa")
                echo "App URL Response: $APP_STATUS_RESPONSE"
                export APP_URL=$(echo $APP_STATUS_RESPONSE | jq -r '.app_url')
                echo $APP_URL
                
                # # Upload test Suite file # #
                TEST_SUITE_RESPONSE=$(curl -u ${{ secrets.BROWSERSTACK_USERNAME }}:${{ secrets.BROWSERSTACK_ACCESS_KEY }} -X POST "https://api-cloud.browserstack.com/app-automate/xcuitest/v2/test-suite" -F "file=@BrowserStack-SampleXCUITest-v2.zip")
                echo "Test Suite Response: $TEST_SUITE_RESPONSE"
                export TEST_SUITE_URL=$(echo $TEST_SUITE_RESPONSE | jq -r '.test_suite_url')
                echo $TEST_SUITE_URL

                # # Upload build using app_url and test-suite_url # #
                BUILD_RESPONSE=$(curl -u ${{ secrets.BROWSERSTACK_USERNAME }}:${{ secrets.BROWSERSTACK_ACCESS_KEY }} -X POST "https://api-cloud.browserstack.com/app-automate/xcuitest/v2/build" -d "{\"app\": \"$APP_URL\", \"testSuite\": \"$TEST_SUITE_URL\", \"devices\": [\"iPhone 15-17\"]}" -H "Content-Type: application/json")
                export BUILD_ID=$(echo $BUILD_RESPONSE | jq -r '.build_id')
                echo $BUILD_ID
              
                echo "Calling the build status API.. fetching session id..."
                echo "Waiting......."
                sleep 60
                export BUILD_STATUS_RESPONSE=$(curl -u ${{ secrets.BROWSERSTACK_USERNAME }}:${{ secrets.BROWSERSTACK_ACCESS_KEY }} -X GET "https://api-cloud.browserstack.com/app-automate/xcuitest/v2/builds/$BUILD_ID")

                echo "Build status response: $BUILD_STATUS_RESPONSE"
                echo "Checking build status.."
                export BUILD_STATUS=$(echo $BUILD_STATUS_RESPONSE | jq -c -r '.status')
                echo "status: $BUILD_STATUS"
                
                if:  $BUILD_STATUS == 'running'
                  echo "check"
                else 
                  echo "uncheck"
                echo "Getting session ID from the response from above call."
                export BROWSERSTACK_SESSION_ID=$(echo $BUILD_STATUS_RESPONSE | jq -c -r '.devices[0].sessions[0].id')
                echo "Session ID: $BROWSERSTACK_SESSION_ID"
                echo "Waiting......."
                sleep 50
                
                echo "Taking build status response's session ID and getting session results..."
                SESSION_RESULTS="$(curl -u ${{ secrets.BROWSERSTACK_USERNAME }}:${{ secrets.BROWSERSTACK_ACCESS_KEY }}  -X GET "https://api-cloud.browserstack.com/app-automate/xcuitest/v2/builds/$BUILD_ID/sessions/$BROWSERSTACK_SESSION_ID")" 

                echo "Get Instrumentation log url from Session response.."
                export INSTRUMENTATION_LOG_URL=$(echo $SESSION_RESULTS | jq -c -r '.testcases.data[0].testcases[1].instrumentation_log')
                echo "Instrumentation log url: $INSTRUMENTATION_LOG_URL"

                echo "Waiting......."
                sleep 40
                echo "Get Instrumentation URL log response..."
                export INSTRUMENT_LOG_TEXT_RESULT=$(curl -u ${{ secrets.BROWSERSTACK_USERNAME }}:${{ secrets.BROWSERSTACK_ACCESS_KEY }} $INSTRUMENTATION_LOG_URL)
                
                echo "Convert Instrumentation URL log response to txt file... "
                echo "$INSTRUMENT_LOG_TEXT_RESULT" > ./instrument_log_text.txt

                echo "Convert log txt file to JUnit-xml"
               
                cat ./instrument_log_text.txt | xcpretty -r junit >> junit.xml

                echo "After conversion- Content of JUnit-xml"
                cat ./build/reports/junit.xml

                echo "Sending test results to test management"
                curl -k -X POST "https://test-management.browserstack.com/api/v1/import/results/xml/junit" -u ${{ secrets.TEST_MANAGEMENT_API_TOKEN }} -F project_name="TCM_Project" -F "file_path=@./build/reports/junit.xml" -F test_run_name="TCM_TEST_RUN"
       
         
                



                
